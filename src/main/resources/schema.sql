--DROP TABLE IF EXISTS users CASCADE;
--DROP TABLE IF EXISTS items CASCADE;
--DROP TABLE IF EXISTS bookings CASCADE;
--DROP TABLE IF EXISTS comments CASCADE;
--DROP TABLE IF EXISTS requests CASCADE;

CREATE TABLE IF NOT EXISTS users (
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(50)                             NOT NULL,
    email VARCHAR(250)                            NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT uq_user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS items (
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    is_available BOOLEAN                                 NOT NULL DEFAULT FALSE,
    owner_id     BIGINT REFERENCES users (id) ON DELETE CASCADE,
    name         VARCHAR(100)                            NOT NULL,
    description  VARCHAR(1000)                           NOT NULL,
    CONSTRAINT pk_item PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS bookings (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_date TIMESTAMP                               NOT NULL,
    end_date   TIMESTAMP                               NOT NULL,
    item_id    BIGINT REFERENCES items (id) ON DELETE CASCADE,
    booker_id  BIGINT REFERENCES users (id) ON DELETE CASCADE,
    status     VARCHAR(20)                             NOT NULL,
    CONSTRAINT pk_booking PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS comments (
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text      VARCHAR(1000)                           NOT NULL,
    item_id   BIGINT REFERENCES items (id) ON DELETE CASCADE,
    author_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
    created   TIMESTAMP                               NOT NULL,
    CONSTRAINT pk_comment PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS requests (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    description     VARCHAR(1000)                           NOT NULL,
    requestor_id    BIGINT REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT pk_requests PRIMARY KEY (id)
);